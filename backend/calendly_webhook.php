<?php
require __DIR__ . '/../vendor/autoload.php';

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;

// Security headers
header('Content-Type: application/json');
header('X-Content-Type-Options: nosniff');
header('X-Frame-Options: DENY');

function logWebhookEvent($event, $status = 'received')
{
  $logEntry = [
    'timestamp' => date('Y-m-d H:i:s'),
    'status' => $status,
    'event_type' => $event['event'] ?? 'unknown',
    'event_data' => $event,
    'ip' => $_SERVER['REMOTE_ADDR'] ?? 'unknown',
    'user_agent' => $_SERVER['HTTP_USER_AGENT'] ?? 'unknown'
  ];

  file_put_contents(__DIR__ . '/calendly_webhook.log', json_encode($logEntry) . "\n", FILE_APPEND | LOCK_EX);
}

function sendNotificationEmail($invitee, $eventDetails)
{
  $mail = new PHPMailer(true);

  try {
    // Server settings
    $mail->isSMTP();
    $mail->Host = 'smtp.gmail.com';
    $mail->SMTPAuth = true;
    $mail->Username = 'khurram.hashmi@gmail.com';
    $mail->Password = 'your-app-password'; // Replace with your Gmail app password
    $mail->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
    $mail->Port = 587;
    $mail->SMTPDebug = 0;

    // Recipients
    $mail->setFrom('noreply@yourdomain.com', 'Calendly Notifications');
    $mail->addAddress('khurram.hashmi@gmail.com', 'Khurram Hashmi');

    // Content
    $mail->isHTML(true);
    $mail->CharSet = 'UTF-8';
    $mail->Subject = 'New Calendly Booking: ' . ($eventDetails['name'] ?? 'Consultation');

    // Format the start time
    $startTime = isset($eventDetails['start_time'])
      ? date('F j, Y \a\t g:i A T', strtotime($eventDetails['start_time']))
      : 'Not specified';

    $duration = isset($eventDetails['duration'])
      ? ($eventDetails['duration'] . ' minutes')
      : 'Not specified';

    // HTML email body
    $htmlBody = "
        <html>
        <head>
            <style>
                body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
                .container { max-width: 600px; margin: 0 auto; padding: 20px; }
                .header { background-color: #00a2ff; color: white; padding: 20px; border-radius: 5px; margin-bottom: 20px; }
                .content { background-color: #ffffff; padding: 20px; border: 1px solid #ddd; border-radius: 5px; }
                .booking-details { background-color: #f8f9fa; padding: 15px; border-radius: 5px; margin: 15px 0; }
                .footer { margin-top: 20px; font-size: 12px; color: #666; }
            </style>
        </head>
        <body>
            <div class='container'>
                <div class='header'>
                    <h2>üóìÔ∏è New Calendly Booking Confirmed</h2>
                </div>
                <div class='content'>
                    <h3>Booking Details</h3>
                    <div class='booking-details'>
                        <p><strong>Event:</strong> " . htmlspecialchars($eventDetails['name'] ?? 'Consultation') . "</p>
                        <p><strong>Date & Time:</strong> " . htmlspecialchars($startTime) . "</p>
                        <p><strong>Duration:</strong> " . htmlspecialchars($duration) . "</p>
                        <p><strong>Status:</strong> " . htmlspecialchars($eventDetails['status'] ?? 'Confirmed') . "</p>
                    </div>
                    
                    <h3>Attendee Information</h3>
                    <div class='booking-details'>
                        <p><strong>Name:</strong> " . htmlspecialchars($invitee['name'] ?? 'Not provided') . "</p>
                        <p><strong>Email:</strong> " . htmlspecialchars($invitee['email'] ?? 'Not provided') . "</p>
                        <p><strong>Time Zone:</strong> " . htmlspecialchars($invitee['timezone'] ?? 'Not specified') . "</p>
                    </div>
                    
                    <h3>Event URLs</h3>
                    <div class='booking-details'>
                        <p><strong>Event URI:</strong> <a href='" . htmlspecialchars($eventDetails['uri'] ?? '#') . "'>View Event</a></p>
                        <p><strong>Cancel URL:</strong> <a href='" . htmlspecialchars($invitee['cancel_url'] ?? '#') . "'>Cancel Booking</a></p>
                        <p><strong>Reschedule URL:</strong> <a href='" . htmlspecialchars($invitee['reschedule_url'] ?? '#') . "'>Reschedule</a></p>
                    </div>
                </div>
                <div class='footer'>
                    <p>This notification was automatically generated by your Calendly webhook.</p>
                    <p>Received: " . date('Y-m-d H:i:s') . "</p>
                </div>
            </div>
        </body>
        </html>";

    // Plain text alternative
    $textBody = "New Calendly Booking Confirmed\n\n";
    $textBody .= "Event: " . ($eventDetails['name'] ?? 'Consultation') . "\n";
    $textBody .= "Date & Time: $startTime\n";
    $textBody .= "Duration: $duration\n";
    $textBody .= "Status: " . ($eventDetails['status'] ?? 'Confirmed') . "\n\n";
    $textBody .= "Attendee Information:\n";
    $textBody .= "Name: " . ($invitee['name'] ?? 'Not provided') . "\n";
    $textBody .= "Email: " . ($invitee['email'] ?? 'Not provided') . "\n";
    $textBody .= "Time Zone: " . ($invitee['timezone'] ?? 'Not specified') . "\n\n";
    $textBody .= "Event URI: " . ($eventDetails['uri'] ?? 'Not provided') . "\n";
    $textBody .= "Cancel URL: " . ($invitee['cancel_url'] ?? 'Not provided') . "\n";
    $textBody .= "Reschedule URL: " . ($invitee['reschedule_url'] ?? 'Not provided') . "\n\n";
    $textBody .= "Received: " . date('Y-m-d H:i:s');

    $mail->Body = $htmlBody;
    $mail->AltBody = $textBody;

    $mail->send();
    return true;
  } catch (Exception $e) {
    error_log("Failed to send Calendly notification email: " . $e->getMessage());
    return false;
  }
}

// Verify webhook signature (optional but recommended)
function verifyWebhookSignature($payload, $signature, $secret)
{
  if (empty($secret) || empty($signature)) {
    return true; // Skip verification if not configured
  }

  $expectedSignature = 'sha256=' . hash_hmac('sha256', $payload, $secret);
  return hash_equals($expectedSignature, $signature);
}

if ($_SERVER['REQUEST_METHOD'] === 'POST') {
  $payload = file_get_contents('php://input');
  $event = json_decode($payload, true);

  // Verify webhook signature (uncomment and add your webhook secret)
  // $webhookSecret = 'your-calendly-webhook-secret';
  // $signature = $_SERVER['HTTP_CALENDLY_WEBHOOK_SIGNATURE'] ?? '';
  // if (!verifyWebhookSignature($payload, $signature, $webhookSecret)) {
  //     http_response_code(401);
  //     echo json_encode(['error' => 'Invalid signature']);
  //     exit;
  // }

  if (!$event) {
    http_response_code(400);
    echo json_encode(['error' => 'Invalid JSON payload']);
    exit;
  }

  // Log the webhook event
  logWebhookEvent($event);

  // Handle different event types
  $eventType = $event['event'] ?? '';

  switch ($eventType) {
    case 'invitee.created':
      $invitee = $event['payload']['invitee'] ?? [];
      $eventDetails = $event['payload']['event'] ?? [];

      // Send notification email
      $emailSent = sendNotificationEmail($invitee, $eventDetails);

      if ($emailSent) {
        logWebhookEvent($event, 'processed_successfully');
        http_response_code(200);
        echo json_encode([
          'status' => 'success',
          'message' => 'Booking notification sent',
          'event_type' => $eventType
        ]);
      } else {
        logWebhookEvent($event, 'email_failed');
        http_response_code(500);
        echo json_encode([
          'status' => 'partial_success',
          'message' => 'Webhook received but email notification failed',
          'event_type' => $eventType
        ]);
      }
      break;

    case 'invitee.canceled':
      $invitee = $event['payload']['invitee'] ?? [];
      $eventDetails = $event['payload']['event'] ?? [];

      // You can add cancellation notification logic here
      logWebhookEvent($event, 'cancellation_received');
      http_response_code(200);
      echo json_encode([
        'status' => 'success',
        'message' => 'Cancellation received',
        'event_type' => $eventType
      ]);
      break;

    default:
      logWebhookEvent($event, 'unhandled_event_type');
      http_response_code(200);
      echo json_encode([
        'status' => 'received',
        'message' => 'Event type not handled',
        'event_type' => $eventType
      ]);
      break;
  }
} else {
  http_response_code(405);
  echo json_encode(['error' => 'Method not allowed']);
}
